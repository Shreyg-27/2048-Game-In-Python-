{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "76fa63e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "4\n",
      "8\n",
      "8\n",
      "8\n",
      "12\n",
      "24\n",
      "32\n",
      "48\n",
      "48\n",
      "52\n",
      "52\n",
      "52\n",
      "60\n",
      "68\n",
      "72\n",
      "80\n",
      "84\n",
      "84\n",
      "88\n",
      "88\n",
      "116\n",
      "148\n",
      "152\n",
      "160\n",
      "164\n",
      "164\n",
      "164\n",
      "168\n",
      "168\n",
      "168\n",
      "168\n",
      "172\n",
      "180\n",
      "196\n",
      "200\n",
      "204\n",
      "204\n",
      "204\n",
      "204\n",
      "204\n",
      "208\n",
      "216\n",
      "220\n",
      "232\n",
      "232\n",
      "232\n",
      "252\n",
      "252\n",
      "252\n",
      "256\n",
      "256\n",
      "256\n",
      "256\n",
      "256\n",
      "268\n",
      "276\n",
      "276\n",
      "280\n",
      "284\n",
      "288\n",
      "316\n",
      "336\n",
      "376\n",
      "440\n",
      "444\n",
      "452\n",
      "452\n",
      "452\n",
      "456\n",
      "460\n",
      "468\n",
      "472\n",
      "472\n",
      "472\n",
      "472\n",
      "476\n",
      "476\n",
      "480\n",
      "488\n",
      "504\n",
      "544\n",
      "552\n",
      "568\n",
      "572\n",
      "572\n",
      "580\n",
      "584\n",
      "596\n",
      "612\n",
      "612\n",
      "616\n",
      "616\n",
      "620\n",
      "628\n",
      "668\n",
      "676\n",
      "680\n",
      "680\n",
      "684\n",
      "748\n",
      "764\n",
      "800\n",
      "808\n",
      "812\n",
      "824\n",
      "824\n",
      "824\n",
      "824\n",
      "824\n",
      "824\n",
      "840\n",
      "844\n",
      "856\n",
      "872\n",
      "904\n",
      "904\n",
      "908\n",
      "912\n",
      "924\n",
      "924\n",
      "924\n",
      "996\n",
      "1128\n",
      "1128\n",
      "1132\n",
      "1140\n",
      "1160\n",
      "1160\n",
      "1160\n",
      "1160\n",
      "1164\n",
      "1164\n",
      "1164\n",
      "1168\n",
      "1176\n",
      "1192\n",
      "1196\n",
      "1240\n",
      "1252\n",
      "1252\n",
      "1252\n",
      "1256\n",
      "1256\n",
      "1264\n",
      "1268\n",
      "1268\n",
      "1272\n",
      "1280\n",
      "1300\n",
      "1300\n",
      "1304\n",
      "1308\n",
      "1316\n",
      "1332\n",
      "1332\n",
      "1340\n",
      "1348\n",
      "1352\n",
      "1360\n",
      "1376\n",
      "1412\n",
      "1476\n",
      "1480\n",
      "1480\n",
      "1480\n",
      "1480\n",
      "1484\n",
      "1496\n",
      "1500\n",
      "1500\n",
      "1500\n",
      "1500\n",
      "1504\n",
      "1516\n",
      "1532\n",
      "1564\n",
      "1564\n",
      "1564\n",
      "1568\n",
      "1580\n",
      "1596\n",
      "1600\n",
      "1600\n",
      "1608\n",
      "1608\n",
      "1612\n",
      "1616\n",
      "1624\n",
      "1644\n",
      "1644\n",
      "1648\n",
      "1648\n",
      "1648\n",
      "1652\n",
      "1660\n",
      "1664\n",
      "1664\n",
      "1664\n",
      "1664\n",
      "1668\n",
      "1676\n",
      "1692\n",
      "1732\n",
      "1796\n",
      "1804\n",
      "1936\n",
      "2192\n",
      "2196\n",
      "2204\n",
      "2208\n",
      "2208\n",
      "2208\n",
      "2212\n",
      "2212\n",
      "2212\n",
      "2224\n",
      "2244\n",
      "2248\n",
      "2256\n",
      "2256\n",
      "2256\n",
      "2256\n",
      "2260\n",
      "2268\n",
      "2284\n",
      "2320\n",
      "2332\n",
      "2340\n",
      "2360\n",
      "2396\n",
      "2396\n",
      "2404\n",
      "2404\n",
      "2408\n",
      "2408\n",
      "2412\n",
      "2424\n",
      "2440\n",
      "2444\n",
      "2444\n",
      "2448\n",
      "2456\n",
      "2460\n",
      "2460\n",
      "2464\n",
      "2472\n",
      "2488\n",
      "2492\n",
      "2492\n",
      "2492\n",
      "2496\n",
      "2496\n",
      "2500\n",
      "2500\n",
      "2500\n",
      "2500\n",
      "2500\n",
      "2504\n",
      "2512\n",
      "2516\n",
      "2516\n",
      "Over\n"
     ]
    }
   ],
   "source": [
    "from tkinter import *\n",
    "from tkinter import messagebox\n",
    "import random\n",
    "class Board:\n",
    "    bg_color={\n",
    "        #'2': '#eee4da',\n",
    "        '2': '#CAFF70',\n",
    "        '4': '#BCEE68',\n",
    "        '8': '#00C957',\n",
    "        '16': '#00CD00',\n",
    "        '32': '#ADFF2F',\n",
    "        '64': '#32CD32',\n",
    "        '128': '#9ACD32',\n",
    "        '256': '#00EE76',\n",
    "        '512': '#00CD66',\n",
    "        '1024': '#54FF9F',\n",
    "        '2048': '#FFFF00',\n",
    "    }\n",
    "    color={\n",
    "         '2': '#776e65',\n",
    "        '4': '#f9f6f2',\n",
    "        '8': '#f9f6f2',\n",
    "        '16': '#f9f6f2',\n",
    "        '32': '#f9f6f2',\n",
    "        '64': '#f9f6f2',\n",
    "        '128': '#f9f6f2',\n",
    "        '256': '#f9f6f2',\n",
    "        '512': '#776e65',\n",
    "        '1024': '#f9f6f2',\n",
    "        '2048': '#f9f6f2',\n",
    "    }\n",
    "    def __init__(self):\n",
    "        self.number=4\n",
    "        self.main_window=Tk()\n",
    "        self.main_window.title('2048 Game')\n",
    "        self.gameArea=Frame(self.main_window,bg= 'dark green')\n",
    "        self.board=[]\n",
    "        self.grid=[[0]*4 for i in range(4)]\n",
    "        self.compress=False\n",
    "        self.merge=False\n",
    "        self.moved=False\n",
    "        self.score=0\n",
    "        for i in range(4):\n",
    "            rows=[]\n",
    "            for j in range(4):\n",
    "                lab=Label(self.gameArea,text='',bg='green',\n",
    "                font=('arial',22,'bold'),width=4,height=2)\n",
    "                lab.grid(row=i,column=j,padx=7,pady=7)\n",
    "                rows.append(lab);\n",
    "            self.board.append(rows)\n",
    "        self.gameArea.grid()\n",
    "    def reverse(self):\n",
    "        for index in range(4):\n",
    "            i=0\n",
    "            j=3\n",
    "            while(i<j):\n",
    "                self.grid[index][i],self.grid[index][j]=self.grid[index][j],self.grid[index][i]\n",
    "                i+=1\n",
    "                j-=1\n",
    "    def transpose(self):\n",
    "        self.grid=[list(t)for t in zip(*self.grid)]\n",
    "    def compressGrid(self):\n",
    "        self.compress=False\n",
    "        temp=[[0] *4 for i in range(4)]\n",
    "        for i in range(4):\n",
    "            count=0\n",
    "            for j in range(4):\n",
    "                if self.grid[i][j]!=0:\n",
    "                    temp[i][count]=self.grid[i][j]\n",
    "                    if count!=j:\n",
    "                        self.compress=True\n",
    "                    count+=1\n",
    "        self.grid=temp\n",
    "    def mergeGrid(self):\n",
    "        self.merge=False\n",
    "        for i in range(4):\n",
    "            for j in range(4 - 1):\n",
    "                if self.grid[i][j] == self.grid[i][j + 1] and self.grid[i][j] != 0:\n",
    "                    self.grid[i][j] *= 2\n",
    "                    self.grid[i][j + 1] = 0\n",
    "                    self.score += self.grid[i][j]\n",
    "                    self.merge = True\n",
    "    def random_cell(self):\n",
    "        cells=[]\n",
    "        for i in range(4):\n",
    "            for j in range(4):\n",
    "                if self.grid[i][j] == 0:\n",
    "                    cells.append((i, j))\n",
    "        curr=random.choice(cells)\n",
    "        i=curr[0]\n",
    "        j=curr[1]\n",
    "        self.grid[i][j]=2\n",
    "    \n",
    "    def can_merge(self):\n",
    "        for i in range(4):\n",
    "            for j in range(3):\n",
    "                if self.grid[i][j] == self.grid[i][j+1]:\n",
    "                    return True\n",
    "        \n",
    "        for i in range(3):\n",
    "            for j in range(4):\n",
    "                if self.grid[i+1][j] == self.grid[i][j]:\n",
    "                    return True\n",
    "        return False\n",
    "    def paintGrid(self):\n",
    "        for i in range(4):\n",
    "            for j in range(4):\n",
    "                if self.grid[i][j]==0:\n",
    "                    self.board[i][j].config(text='',bg='chartreuse2')\n",
    "                else:\n",
    "                    self.board[i][j].config(text=str(self.grid[i][j]),\n",
    "                    bg=self.bg_color.get(str(self.grid[i][j])),\n",
    "                    fg=self.color.get(str(self.grid[i][j])))\n",
    "class Game:\n",
    "    def __init__(self,playpanel):\n",
    "        self.playpanel=playpanel\n",
    "        self.end=False\n",
    "        self.won=False\n",
    "    def start(self):\n",
    "        self.playpanel.random_cell()\n",
    "        self.playpanel.random_cell()\n",
    "        self.playpanel.paintGrid()\n",
    "        self.playpanel.main_window.bind('<Key>', self.link_keys)\n",
    "        self.playpanel.main_window.mainloop()\n",
    "    \n",
    "    def link_keys(self,event):\n",
    "        if self.end or self.won:\n",
    "            return\n",
    "        self.playpanel.compress = False\n",
    "        self.playpanel.merge = False\n",
    "        self.playpanel.moved = False\n",
    "        presed_key=event.keysym\n",
    "        if presed_key=='Up':\n",
    "            self.playpanel.transpose()\n",
    "            self.playpanel.compressGrid()\n",
    "            self.playpanel.mergeGrid()\n",
    "            self.playpanel.moved = self.playpanel.compress or self.playpanel.merge\n",
    "            self.playpanel.compressGrid()\n",
    "            self.playpanel.transpose()\n",
    "        elif presed_key=='Down':\n",
    "            self.playpanel.transpose()\n",
    "            self.playpanel.reverse()\n",
    "            self.playpanel.compressGrid()\n",
    "            self.playpanel.mergeGrid()\n",
    "            self.playpanel.moved = self.playpanel.compress or self.playpanel.merge\n",
    "            self.playpanel.compressGrid()\n",
    "            self.playpanel.reverse()\n",
    "            self.playpanel.transpose()\n",
    "        elif presed_key=='Left':\n",
    "            self.playpanel.compressGrid()\n",
    "            self.playpanel.mergeGrid()\n",
    "            self.playpanel.moved = self.playpanel.compress or self.playpanel.merge\n",
    "            self.playpanel.compressGrid()\n",
    "        elif presed_key=='Right':\n",
    "            self.playpanel.reverse()\n",
    "            self.playpanel.compressGrid()\n",
    "            self.playpanel.mergeGrid()\n",
    "            self.playpanel.moved = self.playpanel.compress or self.playpanel.merge\n",
    "            self.playpanel.compressGrid()\n",
    "            self.playpanel.reverse()\n",
    "        else:\n",
    "            pass\n",
    "        self.playpanel.paintGrid()\n",
    "        print(self.playpanel.score)\n",
    "        flag=0\n",
    "        for i in range(4):\n",
    "            for j in range(4):\n",
    "                if(self.playpanel.grid[i][j]==2048):\n",
    "                    flag=1\n",
    "                    break\n",
    "        if(flag==1): #found 2048\n",
    "            self.won=True\n",
    "            messagebox.showinfo('2048', message='Congratulations! You have won!')\n",
    "            print(\"WON\")\n",
    "            return\n",
    "        for i in range(4):\n",
    "            for j in range(4):\n",
    "                if self.playpanel.grid[i][j]==0:\n",
    "                    flag=1\n",
    "                    break\n",
    "        if not (flag or self.playpanel.can_merge()):\n",
    "            self.end=True\n",
    "            messagebox.showinfo('2048','Game Over!!!')\n",
    "            print(\"Over\")\n",
    "        if self.playpanel.moved:\n",
    "            self.playpanel.random_cell()\n",
    "        \n",
    "        self.playpanel.paintGrid()\n",
    "    \n",
    "playpanel =Board()\n",
    "game2048 = Game( playpanel)\n",
    "game2048.start()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a55bae7a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
